-- DO NOT REMOVE COPYRIGHT NOTICES OR THIS HEADER.
--
-- Contributor(s):
--
-- The Original Software is OpenRedukti (https://github.com/redukti/OpenRedukti).
-- The Initial Developer of the Original Software is REDUKTI LIMITED (http://redukti.com).
-- Authors: Dibyendu Majumdar
--
-- Copyright 2017 REDUKTI LIMITED. All Rights Reserved.
--
-- The contents of this file are subject to the the GNU General Public License
-- Version 3 (https://www.gnu.org/licenses/gpl.txt).


local business_date = redukti.date('2012/12/11')
local utils = assert(require('utils'))
local result, errmsg = utils.build_curves(business_date, '../testdata/20121211/curve_definitions.csv', '../testdata/20121211/par_rates.csv')
if not result:ok() then print(v) end
assert(result:ok())

local expected_maturities = {}
local expected_rates = {}
local expected_factors = {}

expected_maturities[8] = {
41257,
41260,
41263,
41270,
41277,
41288,
41318,
41346,
41379,
41407,
41438,
41470,
41499,
41530,
41621,
41711,
41803,
41895,
41986,
42351,
42717,
43082,
43447,
43812,
44178,
44543,
44908,
45273,
45639,
46004,
46369,
46734,
47100,
47465,
47830,
48195,
48561,
48926,
49291,
49656,
50022,
50387,
50752,
51117,
51483,
51848,
52213,
54039,
55866,
59518,
63171,
}
expected_rates[8] = {
0.00049201090997864,
0.00044878266950137,
0.00067094434946433,
0.00077661601980718,
0.0010648069281214,
0.0010811065180042,
0.0013916472672138,
0.001796560132966,
0.0015116903974086,
0.0015609584410325,
0.0015521306293694,
0.0014129411592384,
0.0014468276057325,
0.0014436257252056,
0.0014245436598462,
0.0014557594675559,
0.0015472873365029,
0.0016768791420365,
0.0032411292487475,
0.0042823118611893,
0.005824135931381,
0.0077190672086881,
0.009688085496569,
0.011559177261341,
0.013307031515391,
0.014881193835651,
0.016285264564303,
0.017564413122253,
0.018715849964381,
0.019719391441281,
0.020549263244326,
0.021225641908983,
0.021766099912748,
0.022169062585893,
0.022455451218764,
0.022671372892834,
0.022831573191357,
0.022956681376265,
0.023059920683781,
0.023140516378437,
0.023210464792982,
0.023257419414481,
0.023293355225472,
0.023317723791104,
0.023344361289351,
0.02337329468917,
0.023418231547681,
0.023881440495098,
0.024603748159848,
0.025623091245345,
0.026229722265916,
}
expected_factors[8] = {
0.99999595608289,
0.99999262277785,
0.99998345630357,
0.99996595713751,
0.99993290482811,
0.99989929925802,
0.99975601490591,
0.99954727091759,
0.99948243179376,
0.99934589445467,
0.99921786209572,
0.9991641979967,
0.99902931316566,
0.99890897724198,
0.99856867594424,
0.99817896947076,
0.99767541631923,
0.99705945646751,
0.99352106131096,
0.98721206911198,
0.97692595949622,
0.96207893330346,
0.94345355555749,
0.92218516325278,
0.89888328312993,
0.87450800908051,
0.8495647543943,
0.824151397546,
0.79863873565407,
0.77366043402481,
0.74978319904697,
0.72711153805859,
0.70566447840389,
0.68575251139777,
0.66726550577222,
0.64977523703633,
0.63313644343564,
0.61721949424229,
0.60184189557798,
0.58703216362367,
0.57260458584037,
0.55881029016144,
0.54545347004584,
0.53254407452752,
0.51984856525153,
0.5074272775509,
0.49503620272144,
0.43322211996722,
0.37345460669649,
0.27744366767642,
0.2070065188358,
}
expected_maturities[9] = {
41346,
41379,
41407,
41438,
41470,
41499,
41530,
41621,
41711,
41803,
41895,
41986,
42351,
42717,
43082,
43447,
43812,
44178,
44543,
44908,
45273,
45639,
46734,
48561,
50387,
52213,
55866,
59518,
}
expected_rates[9] = {
0.0018286690969948,
0.0017581621459193,
0.0017834138253057,
0.0015681851113839,
0.0015555752729597,
0.0015857487232582,
0.0014543287132153,
0.0014325927734449,
0.0014622234165508,
0.0015526680736443,
0.001700201997221,
0.0018812383998169,
0.0028820396318831,
0.0044273926870978,
0.0063235389157316,
0.0083146695088989,
0.010208210022746,
0.011989208571759,
0.013607486592905,
0.015044940680826,
0.016368790395615,
0.017565286536074,
0.020224409075451,
0.022019738338627,
0.022562249411328,
0.022821451629308,
0.0241270509897,
0.02523175539891,
}
expected_factors[9] = {
0.99953918139603,
0.9993980709081,
0.99925271137228,
0.99920977524013,
0.99907986397143,
0.9989361596026,
0.99890089288625,
0.99856059434263,
0.99817089102312,
0.99766734194694,
0.99701861897729,
0.9962343230561,
0.99137549537536,
0.98241057196973,
0.96882656279867,
0.95127094010002,
0.93095776004499,
0.90842308418127,
0.88460284051799,
0.86017942061664,
0.83507304546709,
0.80975458492624,
0.73812419485301,
0.6435104175911,
0.56861553972422,
0.50398626180568,
0.38064988714765,
0.28293005614887,
}
expected_maturities[10] = {
41438,
41470,
41499,
41530,
41561,
41591,
41621,
41652,
41683,
41711,
41743,
41772,
41803,
41986,
42351,
42717,
43082,
43447,
43812,
44178,
44543,
44908,
45273,
45639,
46004,
46369,
46734,
47100,
47465,
47830,
48195,
48561,
48926,
49291,
49656,
50022,
50387,
50752,
51117,
51483,
51848,
52213,
54039,
55866,
59518,
63171,
}
expected_rates[10] = {
0.0032471491934879,
0.0030860566356797,
0.0029955308875651,
0.0029598118373244,
0.0029651291306785,
0.0029362527653952,
0.0028810054081454,
0.0028512760662607,
0.0028449664033162,
0.0028589968586666,
0.0029136286269088,
0.002940448489172,
0.0029435707642853,
0.0032782777399765,
0.0042886021039285,
0.005831262616298,
0.0077248934060277,
0.0096929039882652,
0.01156331896148,
0.013310652806855,
0.014884412962649,
0.016288161933591,
0.017567047408648,
0.018718264362894,
0.019721620313658,
0.020551333068511,
0.021227573870762,
0.021767910920317,
0.022170767166528,
0.022457061186876,
0.02267289819903,
0.022833022096559,
0.022958061348934,
0.023061237985051,
0.023141776453456,
0.023211672269067,
0.02325857863383,
0.023294469897014,
0.023318797212001,
0.023345396302579,
0.023374294042607,
0.023419197616694,
0.023882268586636,
0.024604472711608,
0.025623670918489,
0.026230205322461,
}
expected_factors[10] = {
0.99836441997577,
0.99817539748241,
0.99799132128576,
0.99776439839454,
0.997509149403,
0.99729266548026,
0.99710739991362,
0.99689576546088,
0.9966617744786,
0.99642677848,
0.99610414450717,
0.99583567490157,
0.99558233370876,
0.99344704621665,
0.98719340585142,
0.97689805369687,
0.96205086133376,
0.94342624244955,
0.92215839634787,
0.89885720688876,
0.87448264222636,
0.84954011274801,
0.82412749254141,
0.79861557078979,
0.77363799365366,
0.74976145123163,
0.72709044784578,
0.70564401027373,
0.68573262082343,
0.66724615142222,
0.64975638999981,
0.63311807901514,
0.6172015915004,
0.60182443887057,
0.58701513647951,
0.57258797717489,
0.558794081606,
0.54543764891126,
0.53252862783602,
0.51983348679926,
0.50741255938392,
0.49502184396342,
0.43320955415576,
0.37344377446988,
0.27743562029227,
0.2070005145143,
}
expected_maturities[7] = {
41257,
41258,
41263,
41270,
41277,
41287,
41318,
41346,
41377,
41407,
41438,
41468,
41499,
41530,
41560,
41591,
41621,
41711,
41803,
41895,
41986,
42351,
42717,
43082,
43447,
43812,
44178,
44543,
44908,
45273,
45639,
46734,
48561,
50387,
52213,
}
expected_rates[7] = {
-0.00041935210115786,
0.00019495857838858,
0.00033674005762825,
0.00049104212731801,
0.00063781569408702,
0.00066880898448221,
0.00056884222655843,
0.00044508281880337,
0.00031881381356961,
0.00022747792690302,
0.00016997895425185,
0.00012274749903532,
8.2594756215576e-05,
4.3306711074463e-05,
2.3985648196028e-05,
4.3298241772765e-06,
-5.2789134245712e-06,
1.5949886526105e-05,
7.7288376627955e-05,
0.00020989916643529,
0.00036235130137451,
0.0012852104624032,
0.0027774806288194,
0.0046349547098124,
0.0065974568254123,
0.008461992966493,
0.010232293562904,
0.01182309941821,
0.01324086251231,
0.014577767637962,
0.015798442770548,
0.018541806580838,
0.020446036302355,
0.02107804799053,
0.021398632021717,
}
expected_factors[7] = {
1.0000034467355,
0.99999786346992,
0.99999169685497,
0.99997847509732,
0.99995980968172,
0.99993953416652,
0.99990026277546,
0.99988782103409,
0.99989256988317,
0.99990465078489,
0.99991431565034,
0.99992803556273,
0.99994456122097,
0.99996725354369,
0.99997989168615,
0.99999600233471,
1.0000053078531,
0.9999800300675,
0.99988375656838,
0.99963145049083,
0.99927357588451,
0.99614477689142,
0.98892898862711,
0.97705447695982,
0.96113637883083,
0.9424206997533,
0.92129915207276,
0.89894137051079,
0.87585587269797,
0.85170487723981,
0.82712641966127,
0.75700827366285,
0.664106439559,
0.59012955326801,
0.52598288849422,
}


local function compare(a,b)
	for i = 1,#a do
		assert(math.abs(a[i]-b[i]) < 1e-10)
	end
end

local curves = result:curves()
for k,v in pairs(curves) do
	print('Checking ' .. k .. ' ' .. tostring(v))

	local maturities, rates, factors = v:values()

	compare(maturities, expected_maturities[k])
	compare(rates, expected_rates[k])
	compare(factors, expected_factors[k])

end