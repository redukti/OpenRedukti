// DO NOT REMOVE COPYRIGHT NOTICES OR THIS HEADER.
//
// Contributor(s):
//
// The Original Software is OpenRedukti (https://github.com/redukti/OpenRedukti).
// The Initial Developer of the Original Software is REDUKTI LIMITED (http://redukti.com).
// Authors: Dibyendu Majumdar
//
// Copyright 2017-2019 REDUKTI LIMITED. All Rights Reserved.
//
// The contents of this file are subject to the the GNU General Public License
// Version 3 (https://www.gnu.org/licenses/gpl.txt).

syntax = "proto3";

package redukti;
option cc_enable_arenas = true;
option csharp_namespace = "Redukti.Types";
option java_package = "com.redukti.types";
option java_multiple_files = true;
option java_outer_classname = "ValuationProtos";

import "redukti/enums.proto";
import "redukti/curve.proto";
import "redukti/cashflow.proto";
import "redukti/shared.proto";

message PricingContext
{
	int32 as_of_date = 1;
	MarketDataQualifier qualifier = 2;
	int32 cycle = 3;
	int32 payment_cutoff_date = 4;
	int32 derivative_order = 5;
	bool is_todays_fixings_included = 6;
	CurveGroup curve_group = 7;
	// Starting scenario; 0 is the current scenario,
	// historical scenarios start from 1 and go up.
	int32 from_scenario = 8;
	int32 to_scenario = 9;
}

enum SensitivityTypeCode {
	STC_ZERO = 0;
	STC_PAR = 1;
}

enum SensitivityOrderCode {
	SOC_DELTA = 0;
	SOC_GAMMA = 1;
}

enum SensitivityRiskCode {
	SRC_UNSPECIFIED = 0;
	SRC_FORWARD = 1;
	SRC_DISCOUNT = 2;
}

message IRCurveSensitivities
{
	// Zeror or PAR sensitivities?
	SensitivityTypeCode sensitivity_type = 1;
	// Delta or Gamma ?
	SensitivityOrderCode order = 2;
	// For each dimension a curve identifier is needed
	// For delta curves there is only one dimension so only
	// one curve will be present
	// Second order sensitivities have two dimensions
	// -1 if not applicable
	int32 curve_definition_id_1 = 3;
	int32 curve_definition_id_2 = 4;

	// For each dimension the type of risk being measured
	// is required
	SensitivityRiskCode risk_type_1 = 5;
	SensitivityRiskCode risk_type_2 = 6;

	// Map from <row,col> to value
	// The lower 32 bits represent the row index
	// The higher 32 bits represent the column index
	// We use this format as protobuf requires the map keys to be
	// integral type
	map<uint32, double> values = 7;
}

message ValuationRequest
{
	PricingContext pricing_context = 1;
	CFCollection cashflows = 2;
}

message ValuationResult
{
	// Valuations by scenario
	map<int32, double> valuations = 1;
	// Sensitivities for scenario 0 only
	repeated IRCurveSensitivities sensitivities = 2;
}

message ValuationReply
{
	ReplyHeader header = 1;
	ValuationResult result = 2;
}

message FixingsByIndexTenor
{
	IsdaIndex index = 1;
	Tenor tenor = 2;
	// Map of fixing date to fixing value
	map<int32, double> fixings = 3;
}

// Publish fixings data to the backend
message SetFixingsRequest { FixingsByIndexTenor fixings_by_index_tenor = 1; }

message SetFixingsReply { ReplyHeader header = 1; }

// Publish curve definitions to the backend
message RegisterCurveDefinitionsRequest { repeated IRCurveDefinition curve_definitions = 1; }

message RegisterCurveDefinitionsReply { ReplyHeader header = 1; }

// Publish zero curves to the backend
message SetZeroCurvesRequest
{
	int32 as_of_date = 1;
	int32 cycle = 2;
	MarketDataQualifier qualifier = 3;
	int32 scenario = 4;
	CurveGroup curve_group = 5;
	repeated ZeroCurve forward_curves = 6;
	repeated ZeroCurve discount_curves = 7;
	repeated ZeroCurveParSensitivities par_sensitivities = 8;
}

message SetZeroCurvesReply { ReplyHeader header = 1; }

// A logical way of identifying a curve
// Note that curves are assumed to belong to the same
// context - i.e. business date, curve group,
// scenario etc.
message PricingCurveIdentifier
{
	PricingCurveType type = 1;
	Currency currency = 2;
	IndexFamily index_family = 3;
	Tenor tenor = 4;
}

// This mapping says that whenever the cashflow
// would have looked for a curve with logical id
// 'from_id' it should use logical curve with 'to_id'.
// Note that the mapping is not recursive, i.e.
// if 'to_id' was mapped also then that would not affect
// the outcome of mapping 'from_id'
message CurveMapping
{
	PricingCurveIdentifier from_id = 1;
	PricingCurveIdentifier to_id = 2;
}

// Before any cashflow valuation can be done
// one of the pre-requisites is to provide
// mappings for the logical curves. If a mapping
// is not provided then the logical curve maps
// to itself. The aim of the mapping is to allow
// the cashflow pricer to be unaware of actual curve
// assignments when performing valuations. Note that the
// sensitivites are calculated against each logic curve
// so the mappings affect PV and sensitivities.
message SetCurveMappingsRequest
{
	CurveGroup curve_group = 1;
	// PricingCurveType default_curve_type = 2;
	repeated CurveMapping mappings = 3;
}

message SetCurveMappingsReply { ReplyHeader header = 1; }

message CurveInterpolationRequest
{
	int32 business_date = 1;
	IRCurveDefinition definition = 2;
	ZeroCurve curve = 3;
	// Specify the rate type for which values are being
	// requested. If forward rate is requested then
	// forward_tenor attribute can be set to request a
	// specific tenor
	IRRateType rate_type = 4;
	// If forward rates are requested then
	// Specify the forward tenor for which forward rates
	// should be returned; if not specified then the
	// tenor associated with the index will be returned
	Tenor forward_tenor = 5;
	repeated int32 dates = 6;
}

message CurveInterpolationReply
{
	ReplyHeader header = 1;
	repeated double values = 2;
}

message ResetValuationServiceRequest {}

message ResetValuationServiceReply { ReplyHeader header = 1; }
